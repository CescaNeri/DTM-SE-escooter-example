name: CI/CD
on:
  push: # Every time a new commit is pushed
    branches-ignore: # Except on branches with the following names (bots)
      - 'renovate/**'
      - 'dependabot/**'
    paths-ignore: # Or if the commit is only related to these files
      - 'CHANGELOG.md'
      - 'LICENSE'
      - 'README.md'
      - 'renovate.json'
      - '.gitignore'
  pull_request: # Always run if there is a pull request
  workflow_dispatch: # Enable launching the pipeline from the web interface

jobs:

  Build-Backend:
    runs-on: ubuntu-latest # Pick a Linux machine
    steps:
      - name: Checkout the repository
        # There is a ready-to-use action for that!
        uses: actions/checkout@v3.0.2
      - name: Read the version of Python
        # We need an id for the step, as we will use its outpot later on
        id: python-version
        # I couldn't find a ready-to-use action, so let's write the necessary steps
        # The will be executed on the selected shell
        shell: bash
        # Similar to "cd backend", runs the commands inside that folder
        working-directory: escooter-service
        # Read the file and set its content as output of this step
        run: echo "::set-output name=version::$(cat .python-version)"
      - name: Install Python
        # There is a ready-to-use action for that!
        uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ steps.python-version.outputs.version }}
      - name: Install Poetry
        # There is a ready-to-use action for that!
        uses: snok/install-poetry@v1.3.1
      - name: Install dependencies
        shell: bash
        working-directory: escooter-service
        # Let's set the environment variable used by Flask App
        run: poetry install
      - name: Run unit tests
        shell: bash
        working-directory: escooter-service
        run: poetry run pytest
      - name: Run the end to end test
        shell: bash
        working-directory: escooter-service
        run: ./end-to-end-test.sh

  Build-User-App:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        shell: bash
        working-directory: user-app
        run: npm install
      - name: Run the tests
        shell: bash
        working-directory: user-app
        run: npm test -- --watchAll=false

  Build-Company-Dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        shell: bash
        working-directory: company-dashboard
        run: npm install
      - name: Run the tests
        shell: bash
        working-directory: company-dashboard
        run: npm test -- --watchAll=false

  Build-Account-Service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        working-directory: account-service
        shell: bash
        run: npm install
      - name: Run the tests
        shell: bash
        working-directory: account-service
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:3000
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Renting-Service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Install all dependencies
        working-directory: renting-service
        shell: bash
        run: npm install
      - name: Run the tests
        shell: bash
        working-directory: renting-service
        # There are no tests yet, so let's just make sure that the server starts
        run: | # This is YAML for multiline strings
          npm start &
          # Get the Process ID of the server
          PID="$( echo $! )"
          # Wait some time for the server to be up and running
          sleep 5
          # Check that there is some reply
          curl -sL http://127.0.0.1:3000
          # There has been no error, shut down the server
          # (it is a graceful shutdown, "kill" sends a TERM signal by default)
          kill $PID

  Build-Agents:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Just skip, as there are no agents yet
        run: true

  Integration-Testing:
    needs:
      - Build-Backend
      - Build-User-App
      - Build-Agents
      - Build-Account-Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Containerize the backend
        run: docker build -t escooter-service escooter-service
      - name: Containerize the account service
        run: docker build -t account-service account-service
      - name: Containerize the renting service
        run: docker build -t renting-service renting-service
      - name: Prepare the frontend
        working-directory: user-app
        run: npm install
      - name: Prepare the dashboard
        working-directory: company-dashboard
        run: npm install
      - name: Run the integration test
        run: true # Start the backend, start the agents, perform some interactions

  Deploy:
    needs:
      - Integration-Testing
    runs-on: ubuntu-latest
    # Deploy only on the main repository (forks cannot deploy!)
    # Deploy only on new pushes or workflows triggered manually (pull requests cannot access the secrets)
    # Deploy only from the stable branch
    if: >- # Multiline YAML string where newlines get replaced with spaces
      contains(github.repository, 'DanySK/DTM-SE-escooter-example')
        && contains('push workflow_dispatch', github.event_name)
        && contains('master', github.ref)
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
      - name: Containerize the backend
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-escooter-service:latest escooter-service
      - name: Containerize the account service
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-account-service:latest account-service
      - name: Containerize the renting service
        run: docker build -t ghcr.io/danysk/dtm-se-escooter-example-renting-service:latest renting-service
      - name: Login to the container registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin
      - name: Deliver backend on registry
        run: |
          docker push ghcr.io/danysk/dtm-se-escooter-example-escooter-service:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-account-service:latest
          docker push ghcr.io/danysk/dtm-se-escooter-example-renting-service:latest
